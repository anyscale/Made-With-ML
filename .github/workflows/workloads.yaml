name: workloads
on:
  workflow_dispatch:  # for ability to manually trigger workflow
  pull_request:
    branches:
    - main
  push:
    branches:
    - main
permissions: write-all

jobs:
  # setup:
  #   runs-on: ubuntu-22.04
  #   if: ${{ github.event_name == 'push' }}
  #   outputs:  # outputs (that we'll reuse in other jobs)
  #     CLUSTER_ENV_NAME: ${{ steps.vars.outputs.CLUSTER_ENV_NAME }}
  #     RESULTS_PATH: ${{ steps.vars.outputs.RESULTS_PATH }}
  #   steps:
  #     - name: Set global vars
  #       id: vars
  #       run: |
  #         echo "CLUSTER_ENV_NAME=madewithml-cluster-env" >> "$GITHUB_OUTPUT"
  #         echo "RESULTS_PATH=s3://madewithml/${{ github.actor }}/pull_requests/${{ github.event.pull_request.number }}/commits/${{ github.event.pull_request.head.sha }}" >> "$GITHUB_OUTPUT"

  # test-code:
  #   runs-on: ubuntu-22.04
  #   if: ${{ github.event_name == 'push' }}
  #   needs: setup
  #   steps:

  #     # Configure AWS credentials
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         role-to-assume: ${{ secrets.IAM_ROLE }}
  #         role-session-name: s3access
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     # Set up dependencies
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.10.11'
  #         cache: 'pip'
  #     - run: python3 -m pip install anyscale==0.5.110 typer==0.7.0

  #     # Test code
  #     - name: Test code
  #       run: |
  #         export ANYSCALE_HOST=${{ secrets.ANYSCALE_HOST }}
  #         export ANYSCALE_CLI_TOKEN=${{ secrets.ANYSCALE_CLI_TOKEN }}
  #         python deploy/utils.py submit-job \
  #           --yaml-config-fp deploy/jobs/test_code.yaml \
  #           --cluster-env-name ${{ needs.setup.outputs.CLUSTER_ENV_NAME }} \
  #           --github-username ${{ github.actor }} \
  #           --pr-num ${{ github.event.pull_request.number }} \
  #           --commit-id ${{ github.event.pull_request.head.sha }}

  #     # Read and process results
  #     - name: Read and process results from S3
  #       run: |
  #         export RESULTS=test_code_results
  #         aws s3 cp ${{ needs.setup.outputs.RESULTS_PATH }}/$RESULTS.txt $RESULTS.txt
  #         if grep -q "failed" $RESULTS.txt; then
  #           echo $(tail -n 1 $RESULTS.txt)
  #           exit 1
  #         fi

  # test-data:
  #   runs-on: ubuntu-22.04
  #   if: ${{ github.event_name == 'push' }}
  #   needs: setup
  #   steps:

  #     # Configure AWS credentials
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         role-to-assume: ${{ secrets.IAM_ROLE }}
  #         role-session-name: s3access
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     # Set up dependencies
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.10.11'
  #         cache: 'pip'
  #     - run: python3 -m pip install anyscale==0.5.110 typer==0.7.0

  #     # Test data
  #     - name: Test data
  #       run: |
  #         export ANYSCALE_HOST=${{ secrets.ANYSCALE_HOST }}
  #         export ANYSCALE_CLI_TOKEN=${{ secrets.ANYSCALE_CLI_TOKEN }}
  #         python deploy/utils.py submit-job \
  #           --yaml-config-fp deploy/jobs/test_data.yaml \
  #           --cluster-env-name ${{ needs.setup.outputs.CLUSTER_ENV_NAME }} \
  #           --github-username ${{ github.actor }} \
  #           --pr-num ${{ github.event.pull_request.number }} \
  #           --commit-id ${{ github.event.pull_request.head.sha }}

  #     # Read and process results
  #     - name: Read and process results from S3
  #       run: |
  #         export RESULTS=test_data_results
  #         aws s3 cp ${{ needs.setup.outputs.RESULTS_PATH }}/$RESULTS.txt $RESULTS.txt
  #         if grep -q "failed" $RESULTS.txt; then
  #           echo $(tail -n 1 $RESULTS.txt)
  #           exit 1
  #         fi

  # train-model:
  #   runs-on: ubuntu-22.04
  #   if: ${{ github.event_name == 'push' }}
  #   needs: [setup, test-code, test-data]
  #   outputs:
  #     RUN_ID: ${{ steps.get-and-save-run-id.outputs.RUN_ID }}
  #   steps:

  #     # Configure AWS credentials
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         role-to-assume: ${{ secrets.IAM_ROLE }}
  #         role-session-name: s3access
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     # Set up dependencies
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.10.11'
  #         cache: 'pip'
  #     - run: python3 -m pip install anyscale==0.5.110 typer==0.7.0

  #     # Train model (or tune)
  #     - name: Train model
  #       run: |
  #         export ANYSCALE_HOST=${{ secrets.ANYSCALE_HOST }}
  #         export ANYSCALE_CLI_TOKEN=${{ secrets.ANYSCALE_CLI_TOKEN }}
  #         python deploy/utils.py submit-job \
  #           --yaml-config-fp deploy/jobs/train.yaml \
  #           --cluster-env-name ${{ needs.setup.outputs.CLUSTER_ENV_NAME }} \
  #           --run-id "" \
  #           --github-username ${{ github.actor }} \
  #           --pr-num ${{ github.event.pull_request.number }} \
  #           --commit-id ${{ github.event.pull_request.head.sha }}

  #     # Read and process results
  #     - name: Read and process results from S3
  #       run: |
  #         export RESULTS=training_results
  #         aws s3 cp ${{ needs.setup.outputs.RESULTS_PATH }}/$RESULTS.json $RESULTS.json
  #         python deploy/utils.py json-to-markdown --json-fp $RESULTS.json --markdown-fp $RESULTS.md
  #     - name: Comment results on PR
  #       uses: thollander/actions-comment-pull-request@v2
  #       with:
  #         filePath: $RESULTS.md

  #     # Get run ID
  #     - name: Get and save run ID
  #       id: get-and-save-run-id
  #       run: |
  #         export RUN_ID=$(jq -r '.run_id' training_results.json)
  #         echo "RUN_ID=$RUN_ID" >> "$GITHUB_OUTPUT"
  #         # Save run_id

  # evaluate-model:
  #   runs-on: ubuntu-22.04
  #   if: ${{ github.event_name == 'push' }}
  #   needs: [setup, train-model]
  #   steps:

  #     # Configure AWS credentials
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         role-to-assume: ${{ secrets.IAM_ROLE }}
  #         role-session-name: s3access
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     # Set up dependencies
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.10.11'
  #         cache: 'pip'
  #     - run: python3 -m pip install anyscale==0.5.110 typer==0.7.0

  #     # Evaluate model
  #     - name: Evaluate model
  #       run: |
  #         export ANYSCALE_HOST=${{ secrets.ANYSCALE_HOST }}
  #         export ANYSCALE_CLI_TOKEN=${{ secrets.ANYSCALE_CLI_TOKEN }}
  #         python deploy/utils.py submit-job \
  #           --yaml-config-fp deploy/jobs/evaluate.yaml \
  #           --cluster-env-name ${{ needs.setup.outputs.CLUSTER_ENV_NAME }} \
  #           --run-id ${{ needs.train-model.outputs.RUN_ID }} \
  #           --github-username ${{ github.actor }} \
  #           --pr-num ${{ github.event.pull_request.number }} \
  #           --commit-id ${{ github.event.pull_request.head.sha }}

  #     # Read and process results
  #     - name: Read and process results from S3
  #       run: |
  #         export RESULTS=evaluation_results
  #         aws s3 cp ${{ needs.setup.outputs.RESULTS_PATH }}/$RESULTS.json $RESULTS.json
  #         python deploy/utils.py json-to-markdown --json-fp $RESULTS.json --markdown-fp $RESULTS.md
  #     - name: Comment results on PR
  #       uses: thollander/actions-comment-pull-request@v2
  #       with:
  #         filePath: $RESULTS.md

  # test-model:
  #   runs-on: ubuntu-22.04
  #   if: ${{ github.event_name == 'push' }}
  #   needs: [setup, train-model]
  #   steps:

  #     # Configure AWS credentials
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         role-to-assume: ${{ secrets.IAM_ROLE }}
  #         role-session-name: s3access
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     # Set up dependencies
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.10.11'
  #         cache: 'pip'
  #     - run: python3 -m pip install anyscale==0.5.110 typer==0.7.0

  #     # Test model
  #     - name: Test model
  #       run: |
  #         export ANYSCALE_HOST=${{ secrets.ANYSCALE_HOST }}
  #         export ANYSCALE_CLI_TOKEN=${{ secrets.ANYSCALE_CLI_TOKEN }}
  #         python deploy/utils.py submit-job \
  #           --yaml-config-fp deploy/jobs/test_model.yaml \
  #           --cluster-env-name ${{ needs.setup.outputs.CLUSTER_ENV_NAME }} \
  #           --run-id ${{ needs.train-model.outputs.RUN_ID }} \
  #           --github-username ${{ github.actor }} \
  #           --pr-num ${{ github.event.pull_request.number }} \
  #           --commit-id ${{ github.event.pull_request.head.sha }}

  #     # Read and process results
  #     - name: Read and process results from S3
  #       run: |
  #         export RESULTS=test_model_results
  #         aws s3 cp ${{ needs.setup.outputs.RESULTS_PATH }}/$RESULTS.txt $RESULTS.txt
  #         if grep -q "failed" $RESULTS.txt; then
  #           echo $(tail -n 1 $RESULTS.txt)
  #           exit 1
  #         fi

  # compare-to-prod:
  #   runs-on: ubuntu-22.04
  #   if: ${{ github.event_name == 'push' }}
  #   needs: [setup, evaluate-model, test-model]
  #   steps:

  #     # Configure AWS credentials
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         role-to-assume: ${{ secrets.IAM_ROLE }}
  #         role-session-name: s3access
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     # Set up dependencies
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.10.11'
  #         cache: 'pip'
  #     - run: python3 -m pip install anyscale==0.5.110 typer==0.7.0

  #     # Compare model to production
  #     - name: Compare model
  #       run: echo "Compare model"

  serve-model:
    runs-on: ubuntu-22.04
    if: ${{ github.event_name == 'pull_request' }}
    outputs:  # outputs (that we'll reuse in other jobs)
      PR_NUM: ${{ steps.vars.outputs.RUN_ID }}
    steps:
      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.IAM_ROLE }}
          role-session-name: s3access
          aws-region: ${{ secrets.AWS_REGION }}

      # Set up dependencies
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10.11'
          cache: 'pip'
      - run: python3 -m pip install anyscale==0.5.110 typer==0.7.0

      # Get and read run ID (from S3)
      - name: Get run ID
        id: vars
        run: |
          echo "PULL REQUEST NUM"
          echo ${{ github.event.number }}
