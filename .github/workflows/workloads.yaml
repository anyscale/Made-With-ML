name: workloads
on:
  workflow_dispatch:  # for ability to manually trigger workflow
  pull_request:
    branches:
    - main
permissions: write-all

jobs:
  setup:
    runs-on: ubuntu-22.04
    outputs:  # outputs (that we'll reuse in other jobs)
      S3_BUCKET: ${{ steps.vars.outputs.S3_BUCKET }}
      PR_PATH: ${{ steps.vars.outputs.PR_PATH }}
      COMMIT_PATH: ${{ steps.vars.outputs.COMMIT_PATH }}
      CLUSTER_ENV_NAME: ${{ steps.vars.outputs.CLUSTER_ENV_NAME }}
    steps:
      - name: Set global vars
        id: vars
        run: |
          export S3_BUCKET=s3://madewithml
          export PR_PATH=$S3_BUCKET/${{ github.actor }}/pull_requests/${{ github.event.number }}
          export COMMIT_PATH=$PR_PATH/commits/${{ github.event.pull_request.head.sha }}
          echo "S3_BUCKET=$S3_BUCKET" >> $GITHUB_OUTPUT
          echo "PR_PATH=$PR_PATH" >> $GITHUB_OUTPUT
          echo "COMMIT_PATH=$COMMIT_PATH" >> $GITHUB_OUTPUT
          echo "CLUSTER_ENV_NAME=madewithml-cluster-env" >> $GITHUB_OUTPUT

  test-code:
    runs-on: ubuntu-22.04
    if: ${{ github.event_name == 'pull_request' }}
    needs: setup
    steps:

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.IAM_ROLE }}
          role-session-name: s3access
          aws-region: ${{ secrets.AWS_REGION }}

      # Set up dependencies
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10.11'
          cache: 'pip'
      - run: python3 -m pip install anyscale==0.5.110 typer==0.7.0

      # Test code
      - name: Test code
        run: |
          export ANYSCALE_HOST=${{ secrets.ANYSCALE_HOST }}
          export ANYSCALE_CLI_TOKEN=${{ secrets.ANYSCALE_CLI_TOKEN }}
          python deploy/utils.py submit-job \
            --yaml-config-fp deploy/jobs/test_code.yaml \
            --cluster-env-name ${{ needs.setup.outputs.CLUSTER_ENV_NAME }} \
            --github-username ${{ github.actor }} \
            --pr-num ${{ github.event.number }} \
            --commit-id ${{ github.event.pull_request.head.sha }}

      # Read and process results
      - name: Read and process results from S3
        run: |
          export RESULTS_FILE=test_code_results.txt
          aws s3 cp ${{ needs.setup.outputs.COMMIT_PATH }}/$RESULTS_FILE $RESULTS_FILE
          if grep -q "failed" $RESULTS_FILE; then
            echo $(tail -n 1 $RESULTS_FILE)
            exit 1
          fi

  test-data:
    runs-on: ubuntu-22.04
    if: ${{ github.event_name == 'pull_request' }}
    needs: setup
    steps:

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.IAM_ROLE }}
          role-session-name: s3access
          aws-region: ${{ secrets.AWS_REGION }}

      # Set up dependencies
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10.11'
          cache: 'pip'
      - run: python3 -m pip install anyscale==0.5.110 typer==0.7.0

      # Test data
      - name: Test data
        run: |
          export ANYSCALE_HOST=${{ secrets.ANYSCALE_HOST }}
          export ANYSCALE_CLI_TOKEN=${{ secrets.ANYSCALE_CLI_TOKEN }}
          python deploy/utils.py submit-job \
            --yaml-config-fp deploy/jobs/test_data.yaml \
            --cluster-env-name ${{ needs.setup.outputs.CLUSTER_ENV_NAME }} \
            --github-username ${{ github.actor }} \
            --pr-num ${{ github.event.number }} \
            --commit-id ${{ github.event.pull_request.head.sha }}

      # Read and process results
      - name: Read and process results from S3
        run: |
          export RESULTS_FILE=test_data_results.txt
          aws s3 cp ${{ needs.setup.outputs.COMMIT_PATH }}/$RESULTS_FILE $RESULTS_FILE
          if grep -q "failed" $RESULTS_FILE; then
            echo $(tail -n 1 $RESULTS_FILE)
            exit 1
          fi

  train-model:
    runs-on: ubuntu-22.04
    if: ${{ github.event_name == 'pull_request' }}
    needs: [setup, test-code, test-data]
    outputs:
      RUN_ID: ${{ steps.get-and-save-run-id.outputs.RUN_ID }}
    steps:

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.IAM_ROLE }}
          role-session-name: s3access
          aws-region: ${{ secrets.AWS_REGION }}

      # Set up dependencies
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10.11'
          cache: 'pip'
      - run: python3 -m pip install anyscale==0.5.110 typer==0.7.0

      # Train model (or tune)
      - name: Train model
        run: |
          export ANYSCALE_HOST=${{ secrets.ANYSCALE_HOST }}
          export ANYSCALE_CLI_TOKEN=${{ secrets.ANYSCALE_CLI_TOKEN }}
          python deploy/utils.py submit-job \
            --yaml-config-fp deploy/jobs/train.yaml \
            --cluster-env-name ${{ needs.setup.outputs.CLUSTER_ENV_NAME }} \
            --run-id "" \
            --github-username ${{ github.actor }} \
            --pr-num ${{ github.event.number }} \
            --commit-id ${{ github.event.pull_request.head.sha }}

      # Read and process results
      - name: Read and process results from S3
        run: |
          export JSON_RESULTS_FILE=training_results.json
          export MD_RESULTS_FILE=training_results.md
          echo "JSON_RESULTS_FILE=$JSON_RESULTS_FILE" >> $GITHUB_ENV
          echo "MD_RESULTS_FILE=$MD_RESULTS_FILE" >> $GITHUB_ENV
          aws s3 cp ${{ needs.setup.outputs.COMMIT_PATH }}/$JSON_RESULTS_FILE $JSON_RESULTS_FILE
          python deploy/utils.py json-to-markdown --json-fp $JSON_RESULTS_FILE --markdown-fp $MD_RESULTS_FILE
      - name: Comment results on PR
        uses: thollander/actions-comment-pull-request@v2
        with:
          filePath: ${{ env.MD_RESULTS_FILE }}

      # Get and save run ID
      - name: Get and save run ID
        id: get-and-save-run-id
        run: |
          export RUN_ID=$(jq -r '.run_id' ${{ env.JSON_RESULTS_FILE }})
          export RUN_ID_FILE=run_id.txt
          echo $RUN_ID > $RUN_ID_FILE
          echo "RUN_ID=$RUN_ID" >> $GITHUB_OUTPUT
          python deploy/utils.py save-to-s3 \
            --file-path $RUN_ID_FILE \
            --s3-path ${{ needs.setup.outputs.PR_PATH }}/$RUN_ID_FILE

  evaluate-model:
    runs-on: ubuntu-22.04
    if: ${{ github.event_name == 'pull_request' }}
    needs: [setup, train-model]
    steps:

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.IAM_ROLE }}
          role-session-name: s3access
          aws-region: ${{ secrets.AWS_REGION }}

      # Set up dependencies
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10.11'
          cache: 'pip'
      - run: python3 -m pip install anyscale==0.5.110 typer==0.7.0

      # Evaluate model
      - name: Evaluate model
        run: |
          export ANYSCALE_HOST=${{ secrets.ANYSCALE_HOST }}
          export ANYSCALE_CLI_TOKEN=${{ secrets.ANYSCALE_CLI_TOKEN }}
          python deploy/utils.py submit-job \
            --yaml-config-fp deploy/jobs/evaluate.yaml \
            --cluster-env-name ${{ needs.setup.outputs.CLUSTER_ENV_NAME }} \
            --run-id ${{ needs.train-model.outputs.RUN_ID }} \
            --github-username ${{ github.actor }} \
            --pr-num ${{ github.event.number }} \
            --commit-id ${{ github.event.pull_request.head.sha }}

      # Read and process results
      - name: Read and process results from S3
        run: |
          export JSON_RESULTS_FILE=evaluation_results.json
          export MD_RESULTS_FILE=evaluation_results.md
          echo "MD_RESULTS_FILE=$MD_RESULTS_FILE" >> $GITHUB_ENV
          aws s3 cp ${{ needs.setup.outputs.COMMIT_PATH }}/$JSON_RESULTS_FILE $JSON_RESULTS_FILE
          python deploy/utils.py json-to-markdown --json-fp $JSON_RESULTS_FILE --markdown-fp $MD_RESULTS_FILE
      - name: Comment results on PR
        uses: thollander/actions-comment-pull-request@v2
        with:
          filePath: ${{ env.MD_RESULTS_FILE }}

  test-model:
    runs-on: ubuntu-22.04
    if: ${{ github.event_name == 'pull_request' }}
    needs: [setup, train-model]
    steps:

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.IAM_ROLE }}
          role-session-name: s3access
          aws-region: ${{ secrets.AWS_REGION }}

      # Set up dependencies
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10.11'
          cache: 'pip'
      - run: python3 -m pip install anyscale==0.5.110 typer==0.7.0

      # Test model
      - name: Test model
        run: |
          export ANYSCALE_HOST=${{ secrets.ANYSCALE_HOST }}
          export ANYSCALE_CLI_TOKEN=${{ secrets.ANYSCALE_CLI_TOKEN }}
          python deploy/utils.py submit-job \
            --yaml-config-fp deploy/jobs/test_model.yaml \
            --cluster-env-name ${{ needs.setup.outputs.CLUSTER_ENV_NAME }} \
            --run-id ${{ needs.train-model.outputs.RUN_ID }} \
            --github-username ${{ github.actor }} \
            --pr-num ${{ github.event.number }} \
            --commit-id ${{ github.event.pull_request.head.sha }}

      # Read and process results
      - name: Read and process results from S3
        run: |
          export RESULTS_FILE=test_model_results.txt
          aws s3 cp ${{ needs.setup.outputs.COMMIT_PATH }}/$RESULTS_FILE $RESULTS_FILE
          if grep -q "failed" $RESULTS_FILE; then
            echo $(tail -n 1 $RESULTS_FILE)
            exit 1
          fi

  compare-to-prod:
    runs-on: ubuntu-22.04
    if: ${{ github.event_name == 'pull_request' }}
    needs: [setup, evaluate-model, test-model]
    steps:

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.IAM_ROLE }}
          role-session-name: s3access
          aws-region: ${{ secrets.AWS_REGION }}

      # Set up dependencies
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10.11'
          cache: 'pip'
      - run: python3 -m pip install anyscale==0.5.110 typer==0.7.0

      # Compare model to production
      - name: Get production service run ID
        run: |
          export SERVICE_NAME="madewithml"
          export RUN_ID=$(python deploy/utils.py get-run-id --service-name $SERVICE_NAME)
          export HOLDOUT_LOC="https://raw.githubusercontent.com/GokuMohandas/Made-With-ML/main/datasets/madewithml/holdout.csv"
          export RESULTS_FILE=evaluation_results.json
          echo "RUN_ID=$RUN_ID" >> $GITHUB_ENV

      # Read and process results
      - name: Read and process results from S3
        if: ${{ env.RUN_ID != '' }}
        run: |
          python deploy/utils.py submit-job \
            --yaml-config-fp deploy/jobs/prod_eval.yaml \
            --cluster-env-name ${{ needs.setup.outputs.CLUSTER_ENV_NAME }} \
            --run-id ${{ env.RUN_ID }} \
            --github-username ${{ github.actor }} \
            --pr-num ${{ github.event.number }} \
            --commit-id ${{ github.event.pull_request.head.sha }}
          export JSON_RESULTS_FILE=evaluation_results.json
          export MD_RESULTS_FILE=evaluation_results.md
          echo "MD_RESULTS_FILE=$MD_RESULTS_FILE" >> $GITHUB_ENV
          aws s3 cp ${{ needs.setup.outputs.COMMIT_PATH }}/$JSON_RESULTS_FILE $JSON_RESULTS_FILE
          python deploy/utils.py json-to-markdown --json-fp $JSON_RESULTS_FILE --markdown-fp $MD_RESULTS_FILE
          echo '**Evaluation of (current) Production Service**\n' | cat - $MD_RESULTS_FILE > temp && mv temp $MD_RESULTS_FILE

      # Read and process results (no production run)
      - name: Read and process results from S3 (no production run)
        if: ${{ env.RUN_ID == '' }}
        run: |
          export MD_RESULTS_FILE=evaluation_results.md
          echo "MD_RESULTS_FILE=$MD_RESULTS_FILE" >> $GITHUB_ENV
          echo '**No service running in Production**' > $MD_RESULTS_FILE

      # Comment results on PR
      - name: Comment results on PR
        uses: thollander/actions-comment-pull-request@v2
        with:
          filePath: ${{ env.MD_RESULTS_FILE }}
