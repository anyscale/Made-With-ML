name: workloads
on:
  workflow_dispatch:  # for ability to manually trigger workflow
  pull_request:
    branches:
    - main  # triggered on PRs to the main branch

jobs:
  setup:
    runs-on: ubuntu-22.04

    outputs:  # outputs (that we'll reuse in other jobs)
      ANYSCALE_HOST: ${{ steps.vars.outputs.ANYSCALE_HOST }}
      CLUSTER_ENV_NAME: ${{ steps.vars.outputs.CLUSTER_ENV_NAME }}
      S3_BUCKET: ${{ steps.vars.outputs.S3_BUCKET }}
      GITHUB_USERNAME: ${{ steps.vars.outputs.GITHUB_USERNAME }}
      COMMIT_ID: ${{ steps.vars.outputs.COMMIT_ID }}
      PR_NUM: ${{ steps.vars.outputs.PR_NUM }}

    steps:

      # Set up AWS credentials
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-west-2

      # Checkout our repository
      - name: Checkout repo
        uses: actions/checkout@v3

      # Set up the appropriate Python version
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.11'
          cache: 'pip'

      # Install our Python dependencies
      - name: Install dependencies
        run: |
          python -m pip install -e ".[deploy]" --no-cache-dir
          npm install fs

      # Set all the global variables that we'll use across steps and jobs
      - name: Set global vars
        id: vars
        run: |
          echo "ANYSCALE_HOST=https://console.anyscale-staging.com" >> "$GITHUB_OUTPUT"
          echo "CLUSTER_ENV_NAME=madewithml-cluster-env" >> "$GITHUB_OUTPUT"
          echo "S3_BUCKET=s3://madewithml" >> "$GITHUB_OUTPUT"
          echo "GITHUB_USERNAME=${{ github.actor }}" >> "$GITHUB_OUTPUT"
          echo "COMMIT_ID=$(echo ${{ github.event.pull_request.head.sha }} | cut -c 1-7)" >> "$GITHUB_OUTPUT"
          echo "PR_NUM=${{ github.event.pull_request.number }}" >> "$GITHUB_OUTPUT"

      # Create cluster environment (if needed)
      - name: Create cluster env (if needed)
        run: |
          echo "Creating cluster env"

  test-code:
    runs-on: ubuntu-22.04
    needs: setup
    steps:

      # Set up AWS credentials
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-west-2

      # Checkout our repository
      - name: Checkout repo
        uses: actions/checkout@v3

      # Set up the appropriate Python version
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.11'
          cache: 'pip'

      # Install our Python dependencies
      - name: Install dependencies
        run: |
          python -m pip install -e ".[deploy]" --no-cache-dir
          npm install fs

      # Test code
      - name: Test code
        run: |
          echo "Testing code"

  test-data:
    runs-on: ubuntu-22.04
    needs: setup
    steps:

      # Set up AWS credentials
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-west-2

      # Checkout our repository
      - name: Checkout repo
        uses: actions/checkout@v3

      # Set up the appropriate Python version
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.11'
          cache: 'pip'

      # Install our Python dependencies
      - name: Install dependencies
        run: |
          python -m pip install -e ".[develop]" --no-cache-dir
          npm install fs

      # Test data
      - name: Test data
        run: |
          echo "Testing data"

  train-model:
    runs-on: ubuntu-22.04
    needs: [setup, test-code, test-data]
    steps:

      # Set up AWS credentials
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-west-2

      # Checkout our repository
      - name: Checkout repo
        uses: actions/checkout@v3

      # Set up the appropriate Python version
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.11'
          cache: 'pip'

      # Install our Python dependencies
      - name: Install dependencies
        run: |
          python -m pip install -e ".[deploy]" --no-cache-dir
          npm install fs

      # Train our model (could also tune)
      - name: Train model
        run: |
          echo "Training model"

      # Get run ID
      - name: Get run ID
        run: |
          echo "Run ID:"
          madewithml dojo a100 run tune.py --dryrun

  evaluate-model:
    runs-on: ubuntu-22.04
    needs: [setup, train-model]
    steps:

      # Set up AWS credentials
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-west-2

      # Checkout our repository
      - name: Checkout repo
        uses: actions/checkout@v3

      # Set up the appropriate Python version
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.11'
          cache: 'pip'

      # Install our Python dependencies
      - name: Install dependencies
        run: |
          python -m pip install -e ".[deploy]" --no-cache-dir
          npm install fs

      # Evaluate our model
      - name: Evaluate model
        run: |
          export ANYSCALE_HOST=${{ needs.setup.outputs.ANYSCALE_HOST }}
          export ANYSCALE_CLI_TOKEN=${{ secrets.ANYSCALE_CLI_TOKEN }}
          python deploy/utils.py submit-job \
            --yaml-config-fp deploy/jobs/evaluate.yaml \
            --cluster-env-name ${{ needs.setup.outputs.CLUSTER_ENV_NAME }} \
            --run-id "" \
            --commit-id ${{ needs.setup.outputs.COMMIT_ID }}

      # Read results from S3
      - name: Read results from S3
        run: |
          results_path=${{ needs.setup.outputs.S3_BUCKET }}/${{ needs.setup.outputs.GITHUB_USERNAME }}/results/${{ needs.setup.outputs.COMMIT_ID }}
          aws s3 cp $results_path/evaluation_results.json evaluation_results.json

      # Comment results on PR
      - name: Comment results on PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs')
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: fs.readFileSync('evaluation_results.json', 'utf8')
            })

  test-model:
    runs-on: ubuntu-22.04
    needs: [setup, train-model]
    steps:

      # Set up AWS credentials
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-west-2

      # Checkout our repository
      - name: Checkout repo
        uses: actions/checkout@v3

      # Set up the appropriate Python version
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.11'
          cache: 'pip'

      # Install our Python dependencies
      - name: Install dependencies
        run: |
          python -m pip install -e ".[deploy]" --no-cache-dir
          npm install fs

      # Test model
      - name: Test model
        run: echo "Test model"
