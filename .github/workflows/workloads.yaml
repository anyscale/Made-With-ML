name: workloads
on:
  workflow_dispatch:  # for ability to manually trigger workflow
  pull_request:
    branches:
    - main
permissions: write-all

jobs:
  setup:
    runs-on: ubuntu-22.04
    outputs:  # outputs (that we'll reuse in other jobs)
      S3_BUCKET_NAME: ${{ steps.vars.outputs.S3_BUCKET_NAME }}
      PR_PATH: ${{ steps.vars.outputs.PR_PATH }}
      COMMIT_PATH: ${{ steps.vars.outputs.COMMIT_PATH }}
      CLUSTER_ENV_NAME: ${{ steps.vars.outputs.CLUSTER_ENV_NAME }}
    steps:
      - run: echo "S3_BUCKET_NAME=madewithml" >> $GITHUB_ENV
      - run: echo "PR_PATH=s3://${{ env.S3_BUCKET_NAME }}/${{ github.actor }}/pull_requests/${{ github.event.number }}" >> $GITHUB_ENV
      - run: echo "COMMIT_PATH=${{ env.PR_PATH }}/commits/${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV
      - name: Set global vars
        id: vars
        run: |
          echo "S3_BUCKET_NAME=${{ env.S3_BUCKET_NAME }}" >> $GITHUB_OUTPUT
          echo "PR_PATH=${{ env.PR_PATH }}" >> $GITHUB_OUTPUT
          echo "COMMIT_PATH=${{ env.COMMIT_PATH }}" >> $GITHUB_OUTPUT
          echo "CLUSTER_ENV_NAME=madewithml-cluster-env" >> $GITHUB_OUTPUT

  test-code:
    runs-on: ubuntu-22.04
    if: ${{ github.event_name == 'pull_request' }}
    needs: setup
    steps:

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.IAM_ROLE }}
          role-session-name: s3access
          aws-region: ${{ secrets.AWS_REGION }}

      # Set up dependencies
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10.11'
          cache: 'pip'
      - run: python3 -m pip install anyscale==0.5.110 typer==0.7.0

      # Test code
      - name: Test code
        run: |
          export ANYSCALE_HOST=${{ secrets.ANYSCALE_HOST }}
          export ANYSCALE_CLI_TOKEN=${{ secrets.ANYSCALE_CLI_TOKEN }}
          python deploy/utils.py submit-job \
            --yaml-config-fp deploy/jobs/test_code.yaml \
            --cluster-env-name ${{ needs.setup.outputs.CLUSTER_ENV_NAME }} \
            --github-username ${{ github.actor }} \
            --pr-num ${{ github.event.number }} \
            --commit-id ${{ github.event.pull_request.head.sha }}

      # Read and process results
      - run: echo "RESULTS_FILE=test_code_results.txt" >> $GITHUB_ENV
      - name: Read and process results from S3
        run: |
          aws s3 cp ${{ needs.setup.outputs.COMMIT_PATH }}/${{ env.RESULTS_FILE }} ${{ env.RESULTS_FILE }}
          if grep -q "failed" ${{ env.RESULTS_FILE }}; then
            echo $(tail -n 1 ${{ env.RESULTS_FILE }})
            exit 1
          fi

  test-data:
    runs-on: ubuntu-22.04
    if: ${{ github.event_name == 'pull_request' }}
    needs: setup
    steps:

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.IAM_ROLE }}
          role-session-name: s3access
          aws-region: ${{ secrets.AWS_REGION }}

      # Set up dependencies
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10.11'
          cache: 'pip'
      - run: python3 -m pip install anyscale==0.5.110 typer==0.7.0

      # Test data
      - name: Test data
        run: |
          export ANYSCALE_HOST=${{ secrets.ANYSCALE_HOST }}
          export ANYSCALE_CLI_TOKEN=${{ secrets.ANYSCALE_CLI_TOKEN }}
          python deploy/utils.py submit-job \
            --yaml-config-fp deploy/jobs/test_data.yaml \
            --cluster-env-name ${{ needs.setup.outputs.CLUSTER_ENV_NAME }} \
            --github-username ${{ github.actor }} \
            --pr-num ${{ github.event.number }} \
            --commit-id ${{ github.event.pull_request.head.sha }}

      # Read and process results
      - run: echo "RESULTS_FILE=test_data_results.txt" >> $GITHUB_ENV
      - name: Read and process results from S3
        run: |
          aws s3 cp ${{ needs.setup.outputs.COMMIT_PATH }}/${{ env.RESULTS_FILE }} ${{ env.RESULTS_FILE }}
          if grep -q "failed" ${{ env.RESULTS_FILE }}; then
            echo $(tail -n 1 ${{ env.RESULTS_FILE }})
            exit 1
          fi

  train-model:
    runs-on: ubuntu-22.04
    if: ${{ github.event_name == 'pull_request' }}
    needs: [setup, test-code, test-data]
    outputs:
      RUN_ID: ${{ steps.get-and-save-run-id.outputs.RUN_ID }}
    steps:

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.IAM_ROLE }}
          role-session-name: s3access
          aws-region: ${{ secrets.AWS_REGION }}

      # Set up dependencies
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10.11'
          cache: 'pip'
      - run: python3 -m pip install anyscale==0.5.110 typer==0.7.0

      # Train model (or tune)
      - name: Train model
        run: |
          export ANYSCALE_HOST=${{ secrets.ANYSCALE_HOST }}
          export ANYSCALE_CLI_TOKEN=${{ secrets.ANYSCALE_CLI_TOKEN }}
          python deploy/utils.py submit-job \
            --yaml-config-fp deploy/jobs/train.yaml \
            --cluster-env-name ${{ needs.setup.outputs.CLUSTER_ENV_NAME }} \
            --run-id "" \
            --github-username ${{ github.actor }} \
            --pr-num ${{ github.event.number }} \
            --commit-id ${{ github.event.pull_request.head.sha }}

      # Read and process results
      - run: |
          echo "JSON_RESULTS_FILE=training_results.json" >> $GITHUB_ENV
          echo "MD_RESULTS_FILE=training_results.md" >> $GITHUB_ENV
      - name: Read and process results from S3
        run: |
          aws s3 cp ${{ needs.setup.outputs.COMMIT_PATH }}/${{ env.JSON_RESULTS_FILE }} ${{ env.JSON_RESULTS_FILE }}
          python deploy/utils.py json-to-markdown --json-fp ${{ env.JSON_RESULTS_FILE }} --markdown-fp ${{ env.MD_RESULTS_FILE }}
      - name: Comment results on PR
        uses: thollander/actions-comment-pull-request@v2
        with:
          filePath: ${{ env.MD_RESULTS_FILE }}

      # Get and save run ID
      - run: |
          echo "RUN_ID=$(jq -r '.run_id' ${{ env.JSON_RESULTS_FILE }})" >> $GITHUB_ENV
          echo "RUN_ID_FILE=run_id.txt" >> $GITHUB_ENV
      - name: Get and save run ID
        id: get-and-save-run-id
        run: |
          echo ${{ env.RUN_ID }} > ${{ env.RUN_ID_FILE }}
          echo "RUN_ID=${{ env.RUN_ID }}" >> $GITHUB_OUTPUT
          python deploy/utils.py save-to-s3 \
            --file-path ${{ env.RUN_ID_FILE }} \
            --s3-path ${{ needs.setup.outputs.PR_PATH }}//${{ env.RUN_ID_FILE }}

  evaluate-model:
    runs-on: ubuntu-22.04
    if: ${{ github.event_name == 'pull_request' }}
    needs: [setup, train-model]
    steps:

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.IAM_ROLE }}
          role-session-name: s3access
          aws-region: ${{ secrets.AWS_REGION }}

      # Set up dependencies
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10.11'
          cache: 'pip'
      - run: python3 -m pip install anyscale==0.5.110 typer==0.7.0

      # Evaluate model
      - name: Evaluate model
        run: |
          export ANYSCALE_HOST=${{ secrets.ANYSCALE_HOST }}
          export ANYSCALE_CLI_TOKEN=${{ secrets.ANYSCALE_CLI_TOKEN }}
          python deploy/utils.py submit-job \
            --yaml-config-fp deploy/jobs/evaluate.yaml \
            --cluster-env-name ${{ needs.setup.outputs.CLUSTER_ENV_NAME }} \
            --run-id ${{ needs.train-model.outputs.RUN_ID }} \
            --github-username ${{ github.actor }} \
            --pr-num ${{ github.event.number }} \
            --commit-id ${{ github.event.pull_request.head.sha }}

      # Read and process results
      - run: |
          echo "JSON_RESULTS_FILE=training_results.json" >> $GITHUB_ENV
          echo "MD_RESULTS_FILE=training_results.md" >> $GITHUB_ENV
      - name: Read and process results from S3
        run: |
          aws s3 cp ${{ needs.setup.outputs.COMMIT_PATH }}/${{ env.JSON_RESULTS_FILE }} ${{ env.JSON_RESULTS_FILE }}
          python deploy/utils.py json-to-markdown --json-fp ${{ env.JSON_RESULTS_FILE }} --markdown-fp ${{ env.MD_RESULTS_FILE }}
      - name: Comment results on PR
        uses: thollander/actions-comment-pull-request@v2
        with:
          filePath: ${{ env.MD_RESULTS_FILE }}

  test-model:
    runs-on: ubuntu-22.04
    if: ${{ github.event_name == 'pull_request' }}
    needs: [setup, train-model]
    steps:

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.IAM_ROLE }}
          role-session-name: s3access
          aws-region: ${{ secrets.AWS_REGION }}

      # Set up dependencies
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10.11'
          cache: 'pip'
      - run: python3 -m pip install anyscale==0.5.110 typer==0.7.0

      # Test model
      - name: Test model
        run: |
          export ANYSCALE_HOST=${{ secrets.ANYSCALE_HOST }}
          export ANYSCALE_CLI_TOKEN=${{ secrets.ANYSCALE_CLI_TOKEN }}
          python deploy/utils.py submit-job \
            --yaml-config-fp deploy/jobs/test_model.yaml \
            --cluster-env-name ${{ needs.setup.outputs.CLUSTER_ENV_NAME }} \
            --run-id ${{ needs.train-model.outputs.RUN_ID }} \
            --github-username ${{ github.actor }} \
            --pr-num ${{ github.event.number }} \
            --commit-id ${{ github.event.pull_request.head.sha }}

      # Read and process results
      - run: echo "RESULTS_FILE=test_model_results.txt" >> $GITHUB_ENV
      - name: Read and process results from S3
        run: |
          aws s3 cp ${{ needs.setup.outputs.COMMIT_PATH }}/${{ env.RESULTS_FILE }} ${{ env.RESULTS_FILE }}
          if grep -q "failed" ${{ env.RESULTS_FILE }}; then
            echo $(tail -n 1 ${{ env.RESULTS_FILE }})
            exit 1
          fi

  compare-to-prod:
    runs-on: ubuntu-22.04
    if: ${{ github.event_name == 'pull_request' }}
    needs: [setup, evaluate-model, test-model]
    steps:

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.IAM_ROLE }}
          role-session-name: s3access
          aws-region: ${{ secrets.AWS_REGION }}

      # Set up dependencies
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10.11'
          cache: 'pip'
      - run: python3 -m pip install anyscale==0.5.110 typer==0.7.0

      # Compare model to production
      - name: Compare model
        run: echo "Compare model"
